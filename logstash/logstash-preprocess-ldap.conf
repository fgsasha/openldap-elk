# Parsing openLdap logs logstash config
filter {
  grok {
    # It can be removed if necesary "%{SYSLOGBASE2} %{DATA:syslogtag} "
    match => [ "message", "%{SYSLOGBASE2} %{DATA:syslogtag} (?:(?:<= (?:b|m)db_%{DATA:index_error_filter_type}_candidates: \(%{WORD:index_error_attribute_name}\) not indexed)|(?:ppolicy_%{DATA:ppolicy_op}: %{DATA:ppolicy_data})|(?:connection_input: conn=%{INT:connection} deferring operation: %{DATA:deferring_op})|(?:connection_read\(%{INT:fd_number}\): no connection!)|(?:conn=%{INT:connection} (?:(?:fd=%{INT:fd_number} (?:(?:closed(?: \(connection lost\)|))|(?:ACCEPT from IP=%{IP:src_ip}\:%{INT:src_port} \(IP=%{IP:dst_ip}\:%{INT:dst_port}\))|(?:TLS established tls_ssf=%{INT:tls_ssf} ssf=%{INT:ssf})))|(?:op=%{INT:operation_number} (?:(?:(?:(?:SEARCH )|(?:))RESULT (?:tag=%{INT:tag}|oid=(?:%{DATA:oid}(?:))) err=%{INT:error_code}(?:(?: nentries=%{INT:nentries})|(?:)) text=(?:(?:%{DATA:error_text})|(?:)))|(?:%{WORD:operation_name}(?:(?: %{DATA:data})|(?:))))))))%{SPACE}$" ]
  }
  date {
    locale => "en"
    match => [ "timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601" ]
    target => "@timestamp"
  }
  if [operation_name] == "BIND" {
    grok {
      break_on_match => false
      match => { 
        "data" => [
          "(?:(?:(?<bind_dn>anonymous))|(?:dn=\"%{DATA:bind_dn}\")) (?:(?:method=%{WORD:bind_method})|(?:mech=%{WORD:bind_mech} ssf=%{INT:bind_ssf}))%{SPACE}$",
          "(?:dn=\"uid=%{DATA:username},)|(?:dn=\"cn=%{DATA:username},)"
        ]
      }
      remove_field => [ "data" ]
    }
  }
  if [operation_name] == "SRCH" {
    grok {
      match => [ "data", "(?:(?:base=\"%{DATA:search_base}\" scope=%{INT:search_scope} deref=%{INT:search_deref} filter=\"%{DATA:search_filter}\")|(?:attr=%{DATA:search_attr}))%{SPACE}$" ]
      remove_field => [ "data" ]
    }
  }
  if [operation_name] == "MOD" {
    grok {
      break_on_match => false
      match => { 
        "data" => [
          "(?:(?:dn=\"%{DATA:mod_dn}\")|(?:attr=%{DATA:mod_attr}))%{SPACE}$",
          "(?:dn=\"uid=%{DATA:mod_username},)|(?:dn=\"cn=%{DATA:mod_username},)"
        ]
      }
      remove_field => [ "data" ]
    }
  }
  if [operation_name] == "MODRDN" {
    grok {
      break_on_match => false
      match => { 
        "data" => [
          "dn=\"%{DATA:modrdn_dn}\"%{SPACE}$", 
          "(?:dn=\"uid=%{DATA:modrdn_username},)|(?:dn=\"cn=%{DATA:modrdn_username},)"
        ]
      }
      remove_field => [ "data" ]
    }
  }
  if [operation_name] == "ADD" {
    grok {
      break_on_match => false
      match => { 
        "data" => [
          "dn=\"%{DATA:add_dn}\"%{SPACE}$",
          "(?:dn=\"uid=%{DATA:add_username},)|(?:dn=\"cn=%{DATA:add_username},)"
        ]
      }
      remove_field => [ "data" ]
    }
  }
  if [operation_name] == "DEL" {
    grok {
      break_on_match => false
      match => { 
        "data" => [
          "dn=\"%{DATA:del_dn}\"%{SPACE}$",
          "(?:dn=\"uid=%{DATA:del_username},)|(?:dn=\"cn=%{DATA:del_username},)"
        ]
      }
      remove_field => [ "data" ]
    }
  }
  if [operation_name] == "CMP" {
    grok {
      break_on_match => false
      match => { 
        "data" => [
          "dn=\"%{DATA:cmp_dn}\" attr=\"%{DATA:cmp_attr}\"%{SPACE}$",
          "(?:dn=\"uid=%{DATA:CMP_username},)|(?:dn=\"cn=%{DATA:CMP_username},)"
          ]
        }
      remove_field => [ "data" ]
    }
  }
  if [operation_name] == "EXT" {
    grok {
      match => [ "data", "oid=%{DATA:ext_oid}%{SPACE}$" ]
      remove_field => [ "data" ]
    }
  }
  if [ppolicy_op] == "bind" {
    grok {
      match => [ "ppolicy_data", "(?:(?:Entry %{DATA:ppolicy_bind_dn} has an expired password: %{INT:ppolicy_grace} grace logins)|(?:Setting warning for password expiry for %{DATA:ppolicy_bind_dn} = %{INT:ppolicy_expiration} seconds))%{SPACE}$" ]
      remove_field => [ "ppolicy_data" ]
    }
  }

   
  # get error/result  description
  if [error_code] {
    translate {
        field => "[error_code]"
        destination => "[result_description]"
        dictionary => {
          "0" => "success"
          "1" => "operationsError"
          "2" => "protocolError"
          "3" => "timeLimitExceeded"
          "4" => "sizeLimitExceeded"
          "5" => "compareFalse"
          "6" => "compareTrue"
          "7" => "authMethodNotSupported"
          "8" => "strongerAuthRequired"
          "9" => "partialResults"
          "10" => "referral"
          "11" => "adminLimitExceeded"
          "12" => "unavailableCriticalExtension"
          "13" => "confidentialityRequired"
          "14" => "saslBindInProgress"
          "16" => "noSuchAttribute"
          "17" => "undefinedAttributeType"
          "18" => "inappropriateMatching"
          "19" => "constraintViolation"
          "20" => "attributeOrValueExists"
          "21" => "invalidAttributeSyntax"
          "32" => "noSuchObject"
          "33" => "aliasProblem"
          "34" => "invalidDNSyntax"
          "36" => "aliasDereferencingProblem"
          "48" => "inappropriateAuthentication"
          "49" => "invalidCredentials"
          "50" => "insufficientAccessRights"
          "51" => "busy"
          "52" => "unavailable"
          "53" => "unwillingToPerform"
          "54" => "loopDetect"
          "64" => "namingViolation"
          "65" => "objectClassViolation"
          "66" => "notAllowedOnNonLeaf"
          "67" => "notAllowedOnRDN"
          "68" => "entryAlreadyExists"
          "69" => "objectClassModsProhibited"
          "80" => "other"
          "113" => "lcupResourcesExhausted"
          "114" => "lcupSecurityViolation"
          "115" => "lcupInvalidData"
          "116" => "lcupUnsupportedScheme"
          "117" => "lcupReloadRequired"
          "118" => "canceled"
          "119" => "noSuchOperation"
          "120" => "tooLate"
          "121" => "cannotCancel"
          "122" => "assertionFailed"
          "123" => "authorizationDenied"

        }
        fallback => "unknown"
      }
  }
  # Aggregate
  if [src_ip] {
     aggregate {
       task_id => "%{connection}"
       code => "
       map['src_ip'] = event.get('src_ip')
       map['src_port'] = event.get('src_port')
       map['dst_ip'] = event.get('dst_ip')
       map['dst_port'] = event.get('dst_port')
       "
       map_action => "create"
     }
   }

  if [operation_name] == "BIND" {
     aggregate {
       task_id => "%{connection}"
       code => "map['bind_dn'] = event.get('bind_dn')
       map['username'] = event.get('username')
       #map['message'] ||= []
       #map['message'] << event.get('message')
      "
       map_action => "update"
     }
   }

    if [error_code] {
     aggregate {
       task_id => "%{connection}"
       code => "
       map['error_code'] = event.get('error_code')
       event.set('operation_name', 'AUTH')
       event.set('username', map['username'])
       event.set('bind_dn', map['bind_dn'])
       event.set('error_code', map['error_code'])
       event.set('src_ip', map['src_ip'])
       event.set('src_port', map['src_port'])
       event.set('dst_ip', map['dst_ip'])
       event.set('dst_port', map['dst_port'])
       event.set('tags', 'ldap')
       event.remove('message')
       #map['message'] << event.get('message')
       #event.set('message', map['message'])
      "
       map_action => "update"
       end_of_task => true
       push_map_as_event_on_timeout => true
       timeout => 10
     }
   }
}

